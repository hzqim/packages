--- a/Makefile
+++ b/Makefile
@@ -65,6 +65,8 @@ lua_libs =      `echo $(COPTS) | $(top)/
 nettle_cflags = `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_DNSSEC $(PKG_CONFIG) --cflags nettle hogweed`
 nettle_libs =   `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_DNSSEC $(PKG_CONFIG) --libs nettle hogweed`
 gmp_libs =      `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_DNSSEC NO_GMP --copy -lgmp`
+regex_cflags =  `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_REGEX $(PKG_CONFIG) --cflags libpcre`
+regex_libs =    `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_REGEX $(PKG_CONFIG) --libs libpcre`
 sunos_libs =    `if uname | grep SunOS >/dev/null 2>&1; then echo -lsocket -lnsl -lposix4; fi`
 version =     -DVERSION='\"`$(top)/bld/get-version $(top)`\"'
 
@@ -85,8 +87,8 @@ hdrs = dnsmasq.h config.h dhcp-protocol.
 all : $(BUILDDIR)
 	@cd $(BUILDDIR) && $(MAKE) \
  top="$(top)" \
- build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags)" \
- build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs)" \
+ build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags) $(regex_cflags)" \
+ build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs) $(regex_libs)" \
  -f $(top)/Makefile dnsmasq 
 
 mostly_clean :
@@ -110,8 +112,8 @@ all-i18n : $(BUILDDIR)
 	@cd $(BUILDDIR) && $(MAKE) \
  top="$(top)" \
  i18n=-DLOCALEDIR=\'\"$(LOCALEDIR)\"\' \
- build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags)" \
- build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs)"  \
+ build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags) $(regex_cflags)" \
+ build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(regex_libs)"  \
  -f $(top)/Makefile dnsmasq
 	for f in `cd $(PO); echo *.po`; do \
 		cd $(top) && cd $(BUILDDIR) && $(MAKE) top="$(top)" -f $(top)/Makefile $${f%.po}.mo; \
--- a/src/config.h
+++ b/src/config.h
@@ -171,6 +171,7 @@ RESOLVFILE
 #define HAVE_IPSET 
 #define HAVE_LOOP
 #define HAVE_DUMPFILE
+#define HAVE_REGEX
 
 /* Build options which require external libraries.
    
@@ -366,6 +367,15 @@ static char *compile_opts =
 "no-"
 #endif
 "i18n "
+#ifndef HAVE_REGEX
+"no-"
+#endif
+"regex"
+#if defined(HAVE_IPSET) && defined(HAVE_REGEX) && defined(HAVE_REGEX_IPSET)
+"(+ipset) "
+#else
+" "
+#endif
 #if defined(HAVE_LIBIDN2)
 "IDN2 "
 #else
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -154,6 +154,10 @@ extern int capget(cap_user_header_t head
 #  include <nettle/nettle-meta.h>
 #endif
 
+#ifdef HAVE_REGEX
+#include <pcre.h>
+#endif
+
 /* daemon is function in the C library.... */
 #define daemon dnsmasq_daemon
 
@@ -519,6 +523,7 @@ union mysockaddr {
 #define SERV_LOOP           8192  /* server causes forwarding loop */
 #define SERV_DO_DNSSEC     16384  /* Validate DNSSEC when using this server */
 #define SERV_GOT_TCP       32768  /* Got some data from the TCP connection */
+#define SERV_IS_REGEX      65536  /* server entry is a regex */
 
 struct serverfd {
   int fd;
@@ -545,12 +550,30 @@ struct server {
   u32 uid;
 #endif
   struct server *next; 
+#ifdef HAVE_REGEX
+  pcre *regex;
+  pcre_extra *pextra;
+#endif
 };
 
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+    #define IPSET_IS_DOMAIN 0x01
+    #define IPSET_IS_REGEX 0x02
+#endif
+#endif
+
 struct ipsets {
   char **sets;
   char *domain;
   struct ipsets *next;
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+  pcre *regex;
+  pcre_extra *pextra;
+  unsigned char domain_type;
+#endif
+#endif
 };
 
 struct irec {
--- a/src/forward.c
+++ b/src/forward.c
@@ -147,11 +147,40 @@ static unsigned int search_servers(time_
       }
     else if (serv->flags & SERV_HAS_DOMAIN)
       {
-	unsigned int domainlen = strlen(serv->domain);
-	char *matchstart = qdomain + namelen - domainlen;
-	if (namelen >= domainlen &&
-	    hostname_isequal(matchstart, serv->domain) &&
-	    (domainlen == 0 || namelen == domainlen || *(matchstart-1) == '.' ))
+
+    unsigned int domainlen = matchlen;
+    int serverhit = 0;
+
+#ifdef HAVE_REGEX
+    if (serv->flags & SERV_IS_REGEX)
+      {
+        int captcount = 0;
+        if (pcre_fullinfo(serv->regex, serv->pextra, PCRE_INFO_CAPTURECOUNT, &captcount) == 0)
+          {
+        /* C99 dyn-array, or alloca must be used */
+        int ovect[(captcount + 1) * 3];
+        if (pcre_exec(serv->regex, serv->pextra, qdomain, namelen, 0, 0, ovect, (captcount + 1) * 3) > 0)
+          {
+            domainlen = (unsigned int) (ovect[1] - ovect[0]);
+            if (domainlen >= matchlen)
+              serverhit = 1;
+          }
+          }
+      }
+    else
+#endif
+      {
+        char *matchstart;
+        domainlen = strlen(serv->domain);
+        matchstart = qdomain + namelen - domainlen;
+        if (namelen >= domainlen &&
+            hostname_isequal(matchstart, serv->domain) &&
+            (domainlen == 0 || namelen == domainlen || *(matchstart-1) == '.' ))
+           serverhit = 1;
+      }
+
+    if (serverhit)
+
 	  {
 	    if ((serv->flags & SERV_NO_REBIND) && norebind)	
 	      *norebind = 1;
@@ -178,6 +207,13 @@ static unsigned int search_servers(time_
 		if (domainlen >= matchlen)
 		  {
 		    *type = serv->flags & (SERV_HAS_DOMAIN | SERV_USE_RESOLV | SERV_NO_REBIND | SERV_DO_DNSSEC);
+
+#ifdef HAVE_REGEX
+            if (serv->flags & SERV_IS_REGEX)
+                *domain = qdomain;
+            else
+#endif
+
 		    *domain = serv->domain;
 		    matchlen = domainlen;
 		    if (serv->flags & SERV_NO_ADDR)
@@ -238,6 +274,27 @@ static unsigned int search_servers(time_
   return  flags;
 }
 
+static int match_domain_for_forward(char *domain, struct server *serv)
+{
+  int ret_val = 0;
+  if(serv->flags & SERV_IS_REGEX)
+    {
+#ifdef HAVE_REGEX
+      int captcount = 0;
+      if (pcre_fullinfo(serv->regex, serv->pextra, PCRE_INFO_CAPTURECOUNT, &captcount) == 0)
+    {
+      /* C99 dyn-array, or alloca must be used */
+      int ovect[(captcount + 1) * 3];
+      ret_val = pcre_exec(serv->regex, serv->pextra, domain,
+                          strlen(domain), 0, 0, ovect, (captcount + 1) * 3) > 0;
+    }
+#endif
+    }
+  else
+    ret_val = hostname_isequal(domain, serv->domain);
+  return ret_val;
+}
+
 static int forward_query(int udpfd, union mysockaddr *udpaddr,
 			 union all_addr *dst_addr, unsigned int dst_iface,
 			 struct dns_header *header, size_t plen, time_t now, 
@@ -313,7 +370,12 @@ static int forward_query(int udpfd, unio
 #endif
 
       /* retry on existing query, send to all available servers  */
-      domain = forward->sentto->domain;
+#ifdef HAVE_REGEX
+      if(forward->sentto->flags & SERV_IS_REGEX)
+          domain = daemon->namebuff;
+      else
+#endif
+          domain = forward->sentto->domain;
       forward->sentto->failed_queries++;
       if (!option_bool(OPT_ORDER))
 	{
@@ -450,7 +512,7 @@ static int forward_query(int udpfd, unio
 	     must be NULL also. */
 	  
 	  if (type == (start->flags & SERV_TYPE) &&
-	      (type != SERV_HAS_DOMAIN || hostname_isequal(domain, start->domain)) &&
+	      (type != SERV_HAS_DOMAIN || match_domain_for_forward(domain, start)) &&
 	      !(start->flags & (SERV_LITERAL_ADDRESS | SERV_LOOP)))
 	    {
 	      int fd;
@@ -586,6 +648,21 @@ static size_t process_reply(struct dns_h
       unsigned int matchlen = 0;
       for (ipset_pos = daemon->ipsets; ipset_pos; ipset_pos = ipset_pos->next) 
 	{
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+      if (ipset_pos->domain_type & IPSET_IS_REGEX){
+          int captcount = 0;
+          if (pcre_fullinfo(ipset_pos->regex, ipset_pos->pextra, PCRE_INFO_CAPTURECOUNT, &captcount) == 0)
+          {
+              /* C99 dyn-array, or alloca must be used */
+              int ovect[(captcount + 1) * 3];
+              if (pcre_exec(ipset_pos->regex, ipset_pos->pextra, daemon->namebuff, namelen, 0, 0, ovect, (captcount + 1) * 3) > 0){
+                  sets = ipset_pos->sets;
+              }
+          }
+      }else{
+#endif
+#endif
 	  unsigned int domainlen = strlen(ipset_pos->domain);
 	  char *matchstart = daemon->namebuff + namelen - domainlen;
 	  if (namelen >= domainlen && hostname_isequal(matchstart, ipset_pos->domain) &&
@@ -595,6 +672,11 @@ static size_t process_reply(struct dns_h
 	      matchlen = domainlen;
 	      sets = ipset_pos->sets;
 	    }
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+      }
+#endif
+#endif
 	}
     }
 #endif
@@ -1964,7 +2046,7 @@ unsigned char *tcp_request(int confd, ti
 		      
 		      /* server for wrong domain */
 		      if (type != (last_server->flags & SERV_TYPE) ||
-			  (type == SERV_HAS_DOMAIN && !hostname_isequal(domain, last_server->domain)) ||
+			  (type == SERV_HAS_DOMAIN && !match_domain_for_forward(domain, last_server)) ||
 			  (last_server->flags & (SERV_LITERAL_ADDRESS | SERV_LOOP)))
 			continue;
 
--- a/src/network.c
+++ b/src/network.c
@@ -1512,7 +1512,7 @@ void check_servers(void)
 	    serv->sfd->used = 1;
 	}
       
-      if (!(serv->flags & SERV_NO_REBIND) && !(serv->flags & SERV_LITERAL_ADDRESS))
+      if (!(serv->flags & (SERV_NO_REBIND | SERV_IS_REGEX)) && !(serv->flags & SERV_LITERAL_ADDRESS))
 	{
 	  if (++count > SERVERS_LOGGED)
 	    continue;
--- a/src/option.c
+++ b/src/option.c
@@ -2495,6 +2495,12 @@ static int one_opt(int option, char *arg
 	    while (rebind || (end = split_chr(arg, '/')))
 	      {
 		char *domain = NULL;
+        char *regex = NULL;
+        char *real_end = arg + strlen(arg);
+        if (*arg == ':' && *(real_end - 1) == ':'){
+            *(real_end - 1) = '\0';
+            regex = arg + 1;
+        }else{
 		/* elide leading dots - they are implied in the search algorithm */
 		while (*arg == '.') arg++;
 		/* # matches everything and becomes a zero length domain string */
@@ -2502,12 +2508,27 @@ static int one_opt(int option, char *arg
 		  domain = "";
 		else if (strlen (arg) != 0 && !(domain = canonicalise_opt(arg)))
 		  ret_err(gen_err);
+		}
 		serv = opt_malloc(sizeof(struct server));
 		memset(serv, 0, sizeof(struct server));
 		serv->next = newlist;
 		newlist = serv;
 		serv->domain = domain;
-		serv->flags = domain ? SERV_HAS_DOMAIN : SERV_FOR_NODOTS;
+		serv->flags = domain || regex ? SERV_HAS_DOMAIN : SERV_FOR_NODOTS;
+        if (regex){
+#ifdef HAVE_REGEX
+            const char *error;
+            int erroff;
+            serv->regex = pcre_compile(regex, 0, &error, &erroff, NULL);
+
+            if (!serv->regex)
+                ret_err(error);
+            serv->flags |= SERV_IS_REGEX;
+            serv->pextra = pcre_study(serv->regex, 0, &error);
+#else
+            ret_err("Using a regex while server was configured without regex support!");
+#endif
+        }
 		arg = end;
 		if (rebind)
 		  break;
@@ -2624,6 +2645,30 @@ static int one_opt(int option, char *arg
 	     while ((end = split_chr(arg, '/'))) 
 	       {
 		 char *domain = NULL;
+         char *real_end = arg + strlen(arg);
+         if (*arg == ':' && *(real_end - 1) == ':'){
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+             const char *error;
+             int erroff;
+             char *regex = NULL;
+             *(real_end - 1) = '\0';
+             regex = arg + 1;
+
+             ipsets->next = opt_malloc(sizeof(struct ipsets));
+             ipsets = ipsets->next;
+             memset(ipsets, 0, sizeof(struct ipsets));
+             ipsets->regex = pcre_compile(regex, 0, &error, &erroff, NULL);
+
+             if (!ipsets->regex)
+                 ret_err(error);
+             ipsets->pextra = pcre_study(ipsets->regex, 0, &error);
+             ipsets->domain_type = IPSET_IS_REGEX;
+#endif
+#else
+             ret_err("Using a regex while server was configured without regex support!");
+#endif
+         }else{
 		 /* elide leading dots - they are implied in the search algorithm */
 		 while (*arg == '.')
 		   arg++;
@@ -2636,6 +2681,12 @@ static int one_opt(int option, char *arg
 		 ipsets = ipsets->next;
 		 memset(ipsets, 0, sizeof(struct ipsets));
 		 ipsets->domain = domain;
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+         ipsets->domain_type = IPSET_IS_DOMAIN;
+#endif
+#endif
+         }
 		 arg = end;
 	       }
 	   } 
@@ -2644,6 +2695,11 @@ static int one_opt(int option, char *arg
 	     ipsets->next = opt_malloc(sizeof(struct ipsets));
 	     ipsets = ipsets->next;
 	     memset(ipsets, 0, sizeof(struct ipsets));
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+         ipsets->domain_type = IPSET_IS_DOMAIN;
+#endif
+#endif
 	     ipsets->domain = "";
 	   }
 	 
--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -1573,6 +1573,8 @@ size_t answer_request(struct dns_header
 		      if ((serv->flags & (SERV_HAS_DOMAIN | SERV_NO_ADDR)) != SERV_HAS_DOMAIN)
 		        continue;
 
+			  if (NULL == serv->domain) continue;
+
 		      domainlen = strlen(serv->domain);
 		      if (domainlen == 0 || domainlen > namelen)
 		        continue;
--- a/src/util.c
+++ b/src/util.c
@@ -347,6 +347,8 @@ int hostname_isequal(const char *a, cons
 {
   unsigned int c1, c2;
   
+  if(NULL == a || NULL == b) return (NULL == a && NULL == b);
+
   do {
     c1 = (unsigned char) *a++;
     c2 = (unsigned char) *b++;
